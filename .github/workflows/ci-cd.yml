name: CI/CD Pipeline for OlloLifestyle API

on:
  push:
    branches:
      - master
      - main
      - develop
      - feature/*
  pull_request:
    branches:
      - master
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ollo-lifestyle-api
  SERVER_HOST: 192.168.50.98
  SERVER_USER: olloadmin

jobs:
  # Build and Test Job
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          VERSION="1.0.${{ github.run_number }}"
        else
          VERSION="1.0.${{ github.run_number }}-${{ github.ref_name }}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"

    - name: Create build artifacts
      run: |
        dotnet publish OlloLifestyleAPI/OlloLifestyleAPI.csproj \
          --configuration Release \
          --output ./publish \
          --no-build \
          -p:Version=${{ steps.version.outputs.version }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-artifacts
        path: ./publish/
        retention-days: 30

  # Docker Build and Push Job
  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.build.outputs.version }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_CONFIGURATION=Release

  # Deploy to Production Job
  deploy:
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory on server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          sudo mkdir -p /opt/ollo-api
          sudo chown -R $USER:$USER /opt/ollo-api
          mkdir -p /opt/ollo-api/nginx/{conf.d,logs}
          mkdir -p /opt/ollo-api/logs
          mkdir -p /opt/ollo-api/ssl/{certs,private}
        '

    - name: Copy configuration files to server
      run: |
        # Copy docker-compose and environment files
        scp docker-compose.yml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/opt/ollo-api/
        
        # Copy nginx configuration
        scp -r nginx/* ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/opt/ollo-api/nginx/
        
        # Copy deployment scripts
        scp scripts/deploy.ps1 ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/opt/ollo-api/

    - name: Create environment file on server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          cat > /opt/ollo-api/.env << EOF
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          ASPNETCORE_ENVIRONMENT=Production
          IMAGE_TAG=${{ needs.build.outputs.version }}
          EOF
        '

    - name: Generate SSL certificates (self-signed)
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          if [ ! -f /opt/ollo-api/ssl/certs/ollo-api.crt ]; then
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /opt/ollo-api/ssl/private/ollo-api.key \
              -out /opt/ollo-api/ssl/certs/ollo-api.crt \
              -subj "/C=US/ST=State/L=City/O=Organization/CN=192.168.50.98"
            
            sudo chmod 644 /opt/ollo-api/ssl/certs/ollo-api.crt
            sudo chmod 600 /opt/ollo-api/ssl/private/ollo-api.key
          fi
        '

    - name: Update docker-compose with new image version
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          cd /opt/ollo-api
          sed -i "s|image: .*ollo-lifestyle-api.*|image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}|g" docker-compose.yml
        '

    - name: Deploy to server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          cd /opt/ollo-api
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull the latest image
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          
          # Stop existing containers
          docker-compose down || true
          
          # Remove old containers and images (keep last 3 versions)
          docker system prune -f
          docker images ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +4 | awk "{print \$3}" | xargs -r docker rmi || true
          
          # Start the application
          docker-compose up -d
          
          # Wait for health check
          echo "Waiting for application to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo "Application is healthy!"
              break
            fi
            echo "Waiting for health check... ($i/30)"
            sleep 10
          done
          
          # Show status
          docker-compose ps
        '

    - name: Verify deployment
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          cd /opt/ollo-api
          
          # Check if containers are running
          if ! docker-compose ps | grep -q "Up"; then
            echo "Deployment failed - containers not running"
            docker-compose logs
            exit 1
          fi
          
          # Test API endpoint
          if ! curl -f -k https://localhost/health > /dev/null 2>&1; then
            echo "Health check failed"
            docker-compose logs olloapi
            exit 1
          fi
          
          echo "Deployment successful!"
          echo "API Version: ${{ needs.build.outputs.version }}"
          echo "Deployed at: $(date)"
        '

    - name: Cleanup
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          docker logout ${{ env.REGISTRY }}
        '

  # Rollback Job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Rollback to previous version
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} '
          cd /opt/ollo-api
          
          # Get the previous image tag
          PREVIOUS_IMAGE=$(docker images ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}\t{{.Tag}}\t{{.CreatedAt}}" | grep -v latest | sed -n "2p" | awk "{print \$2}")
          
          if [ -z "$PREVIOUS_IMAGE" ]; then
            echo "No previous version found for rollback"
            exit 1
          fi
          
          echo "Rolling back to version: $PREVIOUS_IMAGE"
          
          # Update docker-compose with previous image
          sed -i "s|image: .*ollo-lifestyle-api.*|image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$PREVIOUS_IMAGE|g" docker-compose.yml
          
          # Restart with previous version
          docker-compose down
          docker-compose up -d
          
          # Wait for health check
          for i in {1..30}; do
            if curl -f -k https://localhost/health > /dev/null 2>&1; then
              echo "Rollback successful!"
              break
            fi
            echo "Waiting for health check... ($i/30)"
            sleep 10
          done
          
          docker-compose ps
        '

# Manual workflow dispatch for rollback
workflow_dispatch:
  inputs:
    reason:
      description: 'Reason for rollback'
      required: true
      default: 'Emergency rollback'